/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'

/**
 * Arguments used to create {@link DigitalProofs}
 * @category Accounts
 * @category generated
 */
export type DigitalProofsArgs = {
  authority: web3.PublicKey
  digIdentityPubkey: web3.PublicKey
  panUpload: string
  passportUpload: string
  pictureUpload: string
  aadharUpload: string
}

export const digitalProofsDiscriminator = [188, 238, 165, 174, 168, 15, 21, 237]
/**
 * Holds the data for the {@link DigitalProofs} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class DigitalProofs implements DigitalProofsArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly digIdentityPubkey: web3.PublicKey,
    readonly panUpload: string,
    readonly passportUpload: string,
    readonly pictureUpload: string,
    readonly aadharUpload: string
  ) {}

  /**
   * Creates a {@link DigitalProofs} instance from the provided args.
   */
  static fromArgs(args: DigitalProofsArgs) {
    return new DigitalProofs(
      args.authority,
      args.digIdentityPubkey,
      args.panUpload,
      args.passportUpload,
      args.pictureUpload,
      args.aadharUpload
    )
  }

  /**
   * Deserializes the {@link DigitalProofs} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [DigitalProofs, number] {
    return DigitalProofs.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link DigitalProofs} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<DigitalProofs> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find DigitalProofs account at ${address}`)
    }
    return DigitalProofs.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '4HYr7M3ytiSoqr3Zh3iK1VcNNm7ZgrNikwmWYJdGMvw4'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, digitalProofsBeet)
  }

  /**
   * Deserializes the {@link DigitalProofs} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [DigitalProofs, number] {
    return digitalProofsBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link DigitalProofs} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return digitalProofsBeet.serialize({
      accountDiscriminator: digitalProofsDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link DigitalProofs} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: DigitalProofsArgs) {
    const instance = DigitalProofs.fromArgs(args)
    return digitalProofsBeet.toFixedFromValue({
      accountDiscriminator: digitalProofsDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link DigitalProofs} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: DigitalProofsArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      DigitalProofs.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link DigitalProofs} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      digIdentityPubkey: this.digIdentityPubkey.toBase58(),
      panUpload: this.panUpload,
      passportUpload: this.passportUpload,
      pictureUpload: this.pictureUpload,
      aadharUpload: this.aadharUpload,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const digitalProofsBeet = new beet.FixableBeetStruct<
  DigitalProofs,
  DigitalProofsArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['authority', beetSolana.publicKey],
    ['digIdentityPubkey', beetSolana.publicKey],
    ['panUpload', beet.utf8String],
    ['passportUpload', beet.utf8String],
    ['pictureUpload', beet.utf8String],
    ['aadharUpload', beet.utf8String],
  ],
  DigitalProofs.fromArgs,
  'DigitalProofs'
)
